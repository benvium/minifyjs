/*jslint white: true, onevar: true, undef: true, newcap: true, nomen: true,
regexp: true, plusplus: true, bitwise: true, maxerr: 50, indent: 4 */
/*global exports, require*/
var defaultOptions = {
    compilation_level: 1,
    output_format: 'json',
    output_info: ['compiled_code', 'warnings', 'errors', 'statistics'],
    warning_level: 'verbose'
},
levels = [
    'WHITESPACE_ONLY',
    'SIMPLE_OPTIMIZATIONS',
    'ADVANCED_OPTIMIZATIONS'
],
extend = function (target) {
    var sources = Array.prototype.slice.call(arguments, 1),
    s, p;
    for (s = 0; s < sources.length; s += 1) {
        for (p in sources[s]) {
            if (sources[s].hasOwnProperty(p)) {
                target[p] = sources[s][p];
            }
        }
    }
    return target;
},
GCC_ServerError = function (obj) {
    this.obj = obj;
},
GCC_ErrorWarning = function (obj) {
    this.obj = obj;
};

GCC_ServerError.prototype.toString = function () {
    var o = this.obj;
    return o.code + ": " + o.error;
};


GCC_ErrorWarning.prototype.toString = function () {
    var o = this.obj;
    return o.type + ": " + (o.warning || o.error) + ' at line ' + o.lineno + ' character ' + o.charno;
};


exports.compile = function (code, options, cb) {
    //options is optional. If options is a function,
    //it's actually the cb function. Shift arguments.
    if (typeof options === 'function') {
        cb = options;
        options = {};
    }

    //Extend default options with current options
    options = extend({}, defaultOptions, options);

    //Options.level can be an integral expression of the compilation level.
    //If it is, convert it GCC's string.
    options.compilation_level = (typeof options.compilation_level === 'number') ?
        levels[options.compilation_level] : options.compilation_level;
    //API lets us pass code in as first parameter, we must add it to options
    //for the server
    options.js_code = code;

    var url, data, request, headers, obj;
    url = require('url').parse('http://closure-compiler.appspot.com/compile');
        data = require('querystring').stringify(options);
    headers = {
        'host': url.host,
        'Content-Length': data.length,
        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
        'Accept-Charset': 'utf-8;'
    };
    request = require('http')
    .createClient(80, url.host)
    .request('POST', url.pathname, headers);
    request.write(data, 'utf8');
    request.end();

    data = "";
    request.on('response', function (response) {
        response.on('data', function (chunk) {
            data += chunk.toString();
        });
        response.on('end', function () {
            var i;
            try {
                obj = JSON.parse(data);
            }
            catch (e) {
                return cb(e, null, data);
            }
            if (obj.serverErrors instanceof Array) {
                for (i = 0; i < obj.serverErrors.length; i += 1) {
                    obj.serverErrors[i] = new GCC_ServerError(obj.serverErrors[i]);
                }
                return cb(obj.serverErrors, null, data);
            }
            if (obj.errors) {
                for (i = 0; i < obj.errors.length; i += 1) {
                    obj.errors[i] = new GCC_ErrorWarning(obj.errors[i]);
                }
            }
            if (obj.warnings) {
                for (i = 0; i < obj.warnings.length; i += 1) {
                    obj.warnings[i] = new GCC_ErrorWarning(obj.warnings[i]);
                }
            }
            return cb(obj.errors || null, obj.warnings || null, obj.compiledCode);
        });
    });
};

